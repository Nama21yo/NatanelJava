public class dataTypes_02 {
  public static void main(String args[]) {
    byte marks1=127;
    
    double marks2 = 6.5;
    float marks3= 6.5f;
    short s = 34;
    long l = 346342L;
    char c ='N';//only single quote
    boolean b = true;

    System.out.println(marks1);//127
    System.out.println(marks2);//6.5
    System.out.println(marks3);//6.5
    System.out.println(s);//34
    System.out.println(l);//346342
    System.out.println(c);//N
    System.out.println(b);//true
  }
}

// Compute distance light travels using long variables.
class Light {
 public static void main(String[] args) {
 int lightspeed;
 long days;
 long seconds;
 long distance;
 // approximate speed of light in miles per second
 lightspeed = 186000;
 days = 1000; // specify number of days here
 seconds = days * 24 * 60 * 60; // convert to seconds
 distance = lightspeed * seconds; // compute distance
 System.out.print("In " + days);
 System.out.print(" days light will travel about ");
 System.out.println(distance + " miles.");
 }
}
// This program generates the following output:
//  In 1000 days light will travel about 16070400000000 miles.
// Clearly, the result could not have been held in an int variable.


// Compute the area of a circle.
class Area {
 public static void main(String[] args) {
 double pi, r, a;
 r = 10.8; // radius of circle
 pi = 3.1416; // pi, approximately
 a = pi * r * r; // compute area
 System.out.println("Area of circle is " + a);
 }
}





// Demonstrate char data type.
class CharDemo {
 public static void main(String[] args) {
 char ch1, ch2;
 ch1 = 88; // code for X
 ch2 = 'Y';
 System.out.print("ch1 and ch2: ");
 System.out.println(ch1 + " " + ch2);
 }
}
// This program displays the following output:
//  ch1 and ch2: X Y

// Although char is designed to hold Unicode characters, it can also be used as an integer type on which you can perform arithmetic operations. For example, you can add two characters  together, or increment the value of a character variable. Consider the following program:char variables behave like integers.
class CharDemo2 {
 public static void main(String[] args) {
 char ch1;
 ch1 = 'X';
 System.out.println("ch1 contains " + ch1);
 ch1++; // increment ch1
 System.out.println("ch1 is now " + ch1);
 }
}
// The output generated by this program is shown here:
//  ch1 contains X
//  ch1 is now Y
// In the program, ch1 is first given the value X. Next, ch1 is incremented. This results in ch1 containing Y, the next character in the ASCII (and Unicode) sequence.


// Demonstrate boolean values.
class BoolTest {
 public static void main(String[] args) {
 boolean b;
 b = false;
 System.out.println("b is " + b);
 b = true;
 System.out.println("b is " + b);
 // a boolean value can control the if statement
 if(b) System.out.println("This is executed.");
 b = false;
 if(b) System.out.println("This is not executed.");
 // outcome of a relational operator is a boolean value
 System.out.println("10 > 9 is " + (10 > 9));
 }
}
// The output generated by this program is shown here:
//  b is false
//  b is true
//  This is executed.
//  10 > 9 is true
// There are three interesting things to notice about this program. First, as you can see, 
// when a boolean value is output by println( ), "true" or "false" is displayed. Second, the value of a boolean variable is sufficient, by itself, to control the if statement. There is no need to write an if statement like this:
// if(b == true) â€¦
// Third, the outcome of a relational operator, such as <, is a boolean value. This is why the  expression 10>9 displays the value "true." Further, the extra set of parentheses around 10>9 is necessary because the + operator has a higher precedence than the >.


// Demonstrate dynamic initialization.
class DynInit {
 public static void main(String[] args) {
 double a = 3.0, b = 4.0;
 // c is dynamically initialized
 double c = Math.sqrt(a * a + b * b);
 System.out.println("Hypotenuse is " + c);
 }
}
//The key point here is that the initialization expression may use any element valid at the time of the initialization, including calls to methods, other variables, or literals.


// Demonstrate block scope.
class Scope {
 public static void main(String[] args) {
 int x; // known to all code within main
 x = 10;
 if(x == 10) { // start new scope
 int y = 20; // known only to this block
 // x and y both known here.
 System.out.println("x and y: " + x + " " + y);
 x = y * 2;
 }
 // y = 100; // Error! y not known here
 // x is still known here.
 System.out.println("x is " + x);
 }
}